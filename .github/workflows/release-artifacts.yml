name: Release Artifacts

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag for the artifacts (e.g., v1.2.3)'
        required: true
        default: ''

env:
  REGISTRY: ghcr.io
  NAMESPACE: ${{ github.repository_owner }}
  REPOSITORY: ${{ github.event.repository.name }}/tools

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        platform:
          - os: linux
            arch: amd64
          - os: darwin
            arch: arm64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up ORAS
        uses: oras-project/setup-oras@v1
        with:
          url: https://github.com/oras-project/oras/releases/download/v1.3.0-beta.3/oras_1.3.0-beta.3_linux_amd64.tar.gz
          checksum: 8d647a3e1761aee86fe20f5e4d3088f1208f721cca6f4d62ffd810a420de171f

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Determine tag
        id: determine-tag
        run: |
          if [ -n "${{ github.event.inputs.tag }}" ]; then
            echo "TAG=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "TAG=latest" >> $GITHUB_OUTPUT
          fi

      - name: Log in to GitHub Container Registry
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | oras login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin

      - name: Display build information
        run: |
          echo "Building and pushing tools artifact for ${{ matrix.platform.os }}/${{ matrix.platform.arch }}"
          echo "Registry: ${{ env.REGISTRY }}"
          echo "Namespace: ${{ env.NAMESPACE }}"
          echo "Repository: ${{ env.REPOSITORY }}"
          echo "Tag: ${{ steps.determine-tag.outputs.TAG }}"

      - name: Build artifacts
        env:
          BUILD_OS: ${{ matrix.platform.os }}
          BUILD_ARCH: ${{ matrix.platform.arch }}
          TAG: ${{ steps.determine-tag.outputs.TAG }}
          BUILD_ONLY: "true"
        run: |
          ./bin/build.sh

      - name: Push ORAS artifacts
        env:
          TAG: ${{ steps.determine-tag.outputs.TAG }}
        run: |
          cd "build/${{ matrix.platform.os }}-${{ matrix.platform.arch }}"

          # Use temporary tag like build.sh does
          TEMP_TAG="${TAG}-${{ matrix.platform.os }}-${{ matrix.platform.arch }}-$$"
          ARTIFACT="${{ env.REGISTRY }}/${{ env.NAMESPACE }}/${{ env.REPOSITORY }}:${TEMP_TAG}"

          # Build oras push command
          push_cmd="oras push \"${ARTIFACT}\""
          push_cmd+=" --artifact-type \"application/vnd.uds.tools.collection.v1\""
          push_cmd+=" --annotation-file manifest-annotations.json"
          push_cmd+=" --annotation-file file-annotations.json"
          push_cmd+=" --config config.json:application/vnd.oci.image.config.v1+json"

          # Add each tool with its media type
          for tool in $(jq -r '.tools | keys[]' ../../tools-config.json); do
            executable_name=$(jq -r ".tools.${tool}.executable_name" ../../tools-config.json)
            media_type=$(jq -r ".tools.${tool}.media_type" ../../tools-config.json)
            if [ -f "${executable_name}" ]; then
              push_cmd+=" \"${executable_name}:${media_type}\""
            fi
          done

          echo "Pushing to temporary tag: ${ARTIFACT}"
          eval "$push_cmd"

          # Output the temp tag for the manifest index job
          echo "TEMP_TAG_${{ matrix.platform.os }}_${{ matrix.platform.arch }}=${TEMP_TAG}" >> $GITHUB_ENV

      - name: Create artifact summary
        run: |
          TAG="${{ steps.determine-tag.outputs.TAG }}"
          PLATFORM="${{ matrix.platform.os }}-${{ matrix.platform.arch }}"
          TEMP_TAG="${TAG}-${{ matrix.platform.os }}-${{ matrix.platform.arch }}-$$"

          echo "## Build Summary for ${PLATFORM}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Successfully built and pushed ORAS artifact (temporary tag):" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ env.REGISTRY }}/${{ env.NAMESPACE }}/${{ env.REPOSITORY }}:${TEMP_TAG}\`" >> $GITHUB_STEP_SUMMARY

  create-manifest-index:
    needs: build-and-push
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up ORAS
        uses: oras-project/setup-oras@v1
        with:
          url: https://github.com/oras-project/oras/releases/download/v1.3.0-beta.3/oras_1.3.0-beta.3_linux_amd64.tar.gz
          checksum: 8d647a3e1761aee86fe20f5e4d3088f1208f721cca6f4d62ffd810a420de171f

      - name: Determine tag
        id: determine-tag
        run: |
          if [ -n "${{ github.event.inputs.tag }}" ]; then
            echo "TAG=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "TAG=latest" >> $GITHUB_OUTPUT
          fi

      - name: Login to registry
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | oras login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin

      - name: Create multi-platform manifest index
        run: |
          TAG="${{ steps.determine-tag.outputs.TAG }}"
          REGISTRY="${{ env.REGISTRY }}"
          NAMESPACE="${{ env.NAMESPACE }}"
          REPOSITORY="${{ env.REPOSITORY }}"

          echo "Looking for temporary platform tags..."
          TEMP_TAGS=()

          # Look for temporary tags created by the build jobs
          for platform in "linux-amd64" "darwin-arm64"; do
            # List tags and find the most recent temp tag for this platform
            TEMP_TAG=$(oras repo tags "${REGISTRY}/${NAMESPACE}/${REPOSITORY}" | grep "^${TAG}-${platform}-" | head -1)
            if [ -n "$TEMP_TAG" ]; then
              TEMP_TAGS+=("$TEMP_TAG")
              echo "Found temporary tag: $TEMP_TAG"
            else
              echo "Warning: Could not find temporary tag for ${platform}"
            fi
          done

          if [ ${#TEMP_TAGS[@]} -eq 2 ]; then
            echo "Creating manifest index with tag: ${TAG}"

            # Create the manifest index
            oras manifest index create "${REGISTRY}/${NAMESPACE}/${REPOSITORY}:${TAG}" "${TEMP_TAGS[@]}" \
              --annotation "org.opencontainers.image.title=UDS k3d Cilium Tools" \
              --annotation "org.opencontainers.image.description=CLI tools for UDS k3d Cilium deployment (multi-platform)" \
              --annotation "org.opencontainers.image.version=${TAG}" \
              --annotation "org.opencontainers.image.source=https://github.com/${{ github.repository }}" \
              --annotation "org.opencontainers.artifact.created=$(date -u +"%Y-%m-%dT%H:%M:%SZ")"

            echo "Created multi-platform manifest index: ${REGISTRY}/${NAMESPACE}/${REPOSITORY}:${TAG}"
          else
            echo "❌ Could not find all temporary platform tags"
            exit 1
          fi

  create-release:
    needs: create-manifest-index
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up ORAS
        uses: oras-project/setup-oras@v1
        with:
          url: https://github.com/oras-project/oras/releases/download/v1.3.0-beta.3/oras_1.3.0-beta.3_linux_amd64.tar.gz
          checksum: 8d647a3e1761aee86fe20f5e4d3088f1208f721cca6f4d62ffd810a420de171f

      - name: Login to GitHub Container Registry
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | oras login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Determine tag
        id: determine-tag
        run: |
          if [ -n "${{ github.event.inputs.tag }}" ]; then
            echo "TAG=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "TAG=latest" >> $GITHUB_OUTPUT
          fi

      - name: Pull and package artifacts
        run: |
          TAG="${{ steps.determine-tag.outputs.TAG }}"
          REGISTRY="ghcr.io"
          NAMESPACE="${{ github.repository_owner }}"
          REPOSITORY="${{ github.event.repository.name }}/tools"

          # Pull artifacts for each platform
          for platform in linux-amd64 darwin-arm64; do
            echo "Pulling ${platform} artifacts..."
            mkdir -p "tools-${platform}"
            oras pull "${REGISTRY}/${NAMESPACE}/${REPOSITORY}:${TAG}" \
              --platform "${platform//-//}" \
              -o "tools-${platform}"

            # Create tarball
            tar -czf "uds-tools-${TAG}-${platform}.tar.gz" -C "tools-${platform}" .
          done

          # Create checksums
          sha256sum uds-tools-*.tar.gz > checksums.txt

      - name: Create Release Notes
        run: |
          TAG="${{ steps.determine-tag.outputs.TAG }}"

          cat > release-notes.md << EOF
          ## Installation

          ### Quick Install (Recommended)
          \`\`\`bash
          # Download and run the installer with its dependencies
          curl -sL https://github.com/${{ github.repository }}/releases/download/${TAG}/install.sh | bash
          \`\`\`

          **Note**: The installer will automatically download required dependencies (common.sh, tools-config.json, use-tools-artifact.sh)

          ### Manual Installation

          #### Option 1: Download Pre-built Binaries
          1. Download the appropriate tarball for your platform:
             - Linux AMD64: \`uds-tools-${TAG}-linux-amd64.tar.gz\`
             - macOS Apple Silicon: \`uds-tools-${TAG}-darwin-arm64.tar.gz\`

          2. Extract and install:
             \`\`\`bash
             tar -xzf uds-tools-${TAG}-linux-amd64.tar.gz
             sudo cp bin/* /usr/local/bin/
             \`\`\`

          #### Option 2: Use the Installer Script Locally
          1. Download the required scripts:
             \`\`\`bash
             wget https://github.com/${{ github.repository }}/releases/download/${TAG}/install.sh
             wget https://github.com/${{ github.repository }}/releases/download/${TAG}/common.sh
             wget https://github.com/${{ github.repository }}/releases/download/${TAG}/tools-config.json
             wget https://github.com/${{ github.repository }}/releases/download/${TAG}/use-tools-artifact.sh
             chmod +x install.sh use-tools-artifact.sh
             \`\`\`

          2. Run the installer:
             \`\`\`bash
             ./install.sh
             \`\`\`

          ### Using ORAS (Container Registry)
          \`\`\`bash
          # Linux AMD64
          oras pull ghcr.io/${{ github.repository }}/tools:${TAG} --platform linux/amd64

          # macOS Apple Silicon
          oras pull ghcr.io/${{ github.repository }}/tools:${TAG} --platform darwin/arm64
          \`\`\`

          **Note**: You must specify \`--platform\` when pulling to avoid filename conflicts

          ## Included Tools
          EOF

          # Add tool versions
          for tool in $(jq -r '.tools | keys[]' tools-config.json); do
            tool_name=$(jq -r ".tools.${tool}.name" tools-config.json)
            version=$(jq -r ".tools.${tool}.version" tools-config.json)
            echo "- ${tool_name} ${version}" >> release-notes.md
          done

          echo "" >> release-notes.md
          echo "## Checksums" >> release-notes.md
          echo "See \`checksums.txt\` in the release assets for SHA256 checksums of all files." >> release-notes.md

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          body_path: release-notes.md
          draft: false
          prerelease: false
          generate_release_notes: false
          files: |
            uds-tools-*.tar.gz
            checksums.txt
            bin/install.sh
            bin/common.sh
            bin/use-tools-artifact.sh
            tools-config.json

      - name: Create GitHub Release (workflow_dispatch)
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.tag != ''
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.inputs.tag }}
          body_path: release-notes.md
          draft: false
          prerelease: false
          generate_release_notes: false
          files: |
            uds-tools-*.tar.gz
            checksums.txt
            bin/install.sh
            bin/common.sh
            bin/use-tools-artifact.sh
            tools-config.json